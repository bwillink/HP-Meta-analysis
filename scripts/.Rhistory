# Carrington et al. 2013 has extremely large sampling variance for a parasite prevalence effect. DOUBLE CHECK!!!
dat_2 <- dat_2[-grep("Carrington et al. 2013. PLOS NegTropDiseases", dat_2$Study),]
varcovmat_2 = matrix(0, nrow = dim(dat_2)[1], ncol = dim(dat_2)[1])
for (i in 1:dim(dat_2)[1]) {
for (j in 1:dim(dat_2)[1]) {
if (i == j) {varcovmat_2[i,j] = dat_2$var.g[i]}else{
if (dat_2[i, "Experiment"] == dat_2[j, "Experiment"] & dat_2[i, "Level_C"] == dat_2[j, "Level_C"] & dat_2[i, "Trait"] == dat_2[j, "Trait"] & dat_2[i, "Trait.category"] == dat_2[j, "Trait.category"]) {
varcovmat_2[i,j] = 1/dat_2[i,"N_C"] + dat_2$g[i]*dat_2$g[j]/(dat_2[i,"N_C"] + dat_2[i,"N_X"] + dat_2[j,"N_X"])
}
}
}
}
# correct eigenvalues in the few studies with large covar to var ratios
varcovmat_2_PD <- nearPD(varcovmat_2, keepDiag = TRUE)
dat_1 <- mutate(dat_1, Host.type.2 = case_when(
Host.type == "Fish" ~ "Vertebrate",
Host.type == "Arthropod" ~ "Invertebrate",
Host.type == "Amphibian" ~ "Vertebrate",
Host.type == "Mollusc" ~ "Invertebrate"))
dat_2 <- mutate(dat_2, Host.type.2 = case_when(
Host.type == "Fish" ~ "Vertebrate",
Host.type == "Arthropod" ~ "Invertebrate",
Host.type == "Amphibian" ~ "Vertebrate",
Host.type == "Mollusc" ~ "Invertebrate",
Host.type == "Reptile" ~ "Vertebrate",
Host.type == "Bird" ~ "Vertebrate",
Host.type == "Mammal" ~ "Vertebrate"))
dat_1 <- mutate(dat_1, Gradient.category.2 = case_when(
Gradient.category == "Pollution" ~ "Environment",
Gradient.category == "Environment" ~ "Environment",
Gradient.category == "Resource" ~ "Resource"))
dat_2 <- mutate(dat_2, Gradient.category.2 = case_when(
Gradient.category == "Pollution" ~ "Environment",
Gradient.category == "Environment" ~ "Environment",
Gradient.category == "Resource" ~ "Resource"))
# First, get all the curated data
final_dat <- merge(dat_2, dat_1, all = T )
nrow(final_dat)
# do we have any observational studies left after filtering?
levels(as.factor(final_dat$Study.type))
# Number of studies that report median instead of mean
c(unique(non_par$Study), unique(non_par_2$Study)) %in% final_dat$Study
length(unique(non_par$Study)) + length(unique(non_par_2$Study))
length(non_par$ID) + length(non_par_2$ID)
# number of studies with only data range
length(non_par$ID)
length(unique(non_par$Study))
# number of studies with only IQ
length(non_par_2$ID)
length(unique(non_par_2$Study))
# number of studies with OR
length(unique(final_dat$Study[final_dat$Variation.Type == "OR"]))
# number or studies w/ multiple treatment levels or measuring time points
k = c()
for(i in 2:nrow(final_dat)){
if(final_dat$Trait[i] == final_dat$Trait[i-1] &
final_dat$X_gradient[i] == final_dat$X_gradient[i-1] &
final_dat$Host[i] == final_dat$Host[i-1] &
final_dat$Parasite[i] == final_dat$Parasite[i-1]) {
k <- append(k, final_dat$Experiment[i])
}
}
length(unique(k))
# studies with negative eigen values
sum(unique(c(Neg_eigen_1$eigen,Neg_eigen_2$study)) %in% final_dat$Study == T)
# how many experiments
length(unique(final_dat$Experiment))
# how many studies include more than one experiment
k = c()
for(i in 2:nrow(final_dat)){
if(final_dat$Experiment[i] != final_dat$Experiment[i-1] &
final_dat$Study[i] == final_dat$Study[i-1]) {
k <- append(k, final_dat$Study[i])
}
}
length(unique(k))
# how many species per taxonomic groups
length(unique(final_dat$Host[final_dat$Host.type == "Arthropod"]))
length(unique(final_dat$Host[final_dat$Host.type == "Mollusc"]))
length(unique(final_dat$Host[final_dat$Host.type == "Fish"]))
length(unique(final_dat$Host[final_dat$Host.type == "Amphibian"]))
length(unique(final_dat$Host[final_dat$Host.type == "Reptile"]))
length(unique(final_dat$Host[final_dat$Host.type == "Bird"]))
length(unique(final_dat$Host[final_dat$Host.type == "Mammal"]))
length(unique(final_dat$Parasite[final_dat$Parasite.type == "Bacteria"]))
length(unique(final_dat$Parasite[final_dat$Parasite.type == "Fungus"]))
length(unique(final_dat$Parasite[final_dat$Parasite.type == "Helminth"]))
length(unique(final_dat$Parasite[final_dat$Parasite.type == "Myxozoa"]))
length(unique(final_dat$Parasite[final_dat$Parasite.type == "Protozoan"]))
length(unique(final_dat$Parasite[final_dat$Parasite.type == "Virus"]))
dat_2$absolute <- abs(dat_2$g)
Q2.abs <-
rma.mv(
absolute ~ Trait.type:Gradient.category -1,
V = varcovmat_2_PD$mat,
random = list(~ 1 | Experiment,  ~ 1 | ID),
data = dat_2,
method = "REML",
)
summary(Q2.abs)
forest.default(x= Q2.abs$beta, sei =  Q2.abs$se, ci.lb =  Q2.abs$ci.lb, ci.ub =  Q2.abs$ci.ub,
annotate=TRUE, showweights=T, header=F,
slab = c("EE:prevalence", "EE:intensity","EE:fecundity", "EE:survivorship",
"CP:prevalence", "CP:intensity","CP:fecundity", "CP:survivorship",
"RL:prevalence", "RL:intensity","RL:fecundity","RL:survivorship"))
# Environment
# Prevalence vs Fecundity
anova(Q2, X=c(-1,0,1,0,0,0,0,0,0,0,0,0))
# Prevalence vs Survivorship
anova(Q2, X=c(-1,0,0,1,0,0,0,0,0,0,0,0))
# Intensity vs Fecundity
anova(Q2, X=c(0,-1,1,0,0,0,0,0,0,0,0,0))
# Intensity vs Survivorship
anova(Q2, X=c(0,-1,0,1,0,0,0,0,0,0,0,0))
# Pollution
# Prevalence vs Fecundity
anova(Q2, X=c(0,0,0,0,-1,0,1,0,0,0,0,0))
# Prevalence vs Survivorship
anova(Q2, X=c(0,0,0,0,-1,0,0,1,0,0,0,0))
# Intensity vs Fecundity
anova(Q2, X=c(0,0,0,0,0,-1,1,0,0,0,0,0))
# Intensity vs Survivorship
anova(Q2, X=c(0,0,0,0,0,-1,0,1,0,0,0,0))
# Resources
# Prevalence vs Fecundity
anova(Q2, X=c(0,0,0,0,0,0,0,0,-1,0,1,0))
# Prevalence vs Survivorship
anova(Q2, X=c(0,0,0,0,0,0,0,0,-1,0,0,1))
# Intensity vs Fecundity
anova(Q2, X=c(0,0,0,0,0,0,0,0,0,-1,1,0))
# Intensity vs Survivorship
anova(Q2, X=c(0,0,0,0,0,0,0,0,0,-1,0,1))
Table3 <- data.frame(Stressor_type = rep(c("Endogenous environment",  "Chemical pollution","Resource limitation"), each = 4),
Response_trait = c(rep(c("Prevalence","Intensity","Fecundity", "Survivorship"), 3)),
Overall_mean = round(Q2$beta,3),
Lower_95 = round(Q2$ci.lb,3),
Upper_95 = round(Q2$ci.ub,3),
P_value = round(Q2$pval,3),
N_effects = c(length(dat_2$ID[dat_2$Gradient.category == "Environment" & dat_2$Trait.type == "Prevalence"]),
length(dat_2$ID[dat_2$Gradient.category == "Environment" & dat_2$Trait.type == "Intensity"]),
length(dat_2$ID[dat_2$Gradient.category == "Environment" & dat_2$Trait.type == "Fecundity"]),
length(dat_2$ID[dat_2$Gradient.category == "Environment" & dat_2$Trait.type == "Survivorship"]),
length(dat_2$ID[dat_2$Gradient.category == "Pollution" & dat_2$Trait.type == "Prevalence"]),
length(dat_2$ID[dat_2$Gradient.category == "Pollution" & dat_2$Trait.type == "Intensity"]),
length(dat_2$ID[dat_2$Gradient.category == "Pollution" & dat_2$Trait.type == "Fecundity"]),
length(dat_2$ID[dat_2$Gradient.category == "Pollution" & dat_2$Trait.type == "Survivorship"]),
length(dat_2$ID[dat_2$Gradient.category == "Resource" & dat_2$Trait.type == "Prevalence"]),
length(dat_2$ID[dat_2$Gradient.category == "Resource" & dat_2$Trait.type == "Intensity"]),
length(dat_2$ID[dat_2$Gradient.category == "Resource" & dat_2$Trait.type == "Fecundity"]),
length(dat_2$ID[dat_2$Gradient.category == "Resource" & dat_2$Trait.type == "Survivorship"])),
N_experiments = c(length(unique(dat_2$Experiment[dat_2$Gradient.category == "Environment" & dat_2$Trait.type == "Prevalence"])),
length(unique(dat_2$Experiment[dat_2$Gradient.category == "Environment" & dat_2$Trait.type == "Intensity"])),
length(unique(dat_2$Experiment[dat_2$Gradient.category == "Environment" & dat_2$Trait.type == "Fecundity"])),
length(unique(dat_2$Experiment[dat_2$Gradient.category == "Environment" & dat_2$Trait.type == "Survivorship"])),
length(unique(dat_2$Experiment[dat_2$Gradient.category == "Pollution" & dat_2$Trait.type == "Prevalence"])),
length(unique(dat_2$Experiment[dat_2$Gradient.category == "Pollution" & dat_2$Trait.type == "Intensity"])),
length(unique(dat_2$Experiment[dat_2$Gradient.category == "Pollution" & dat_2$Trait.type == "Fecundity"])),
length(unique(dat_2$Experiment[dat_2$Gradient.category == "Pollution" & dat_2$Trait.type == "Survivorship"])),
length(unique(dat_2$Experiment[dat_2$Gradient.category == "Resource" & dat_2$Trait.type == "Prevalence"])),
length(unique(dat_2$Experiment[dat_2$Gradient.category == "Resource" & dat_2$Trait.type == "Intensity"])),
length(unique(dat_2$Experiment[dat_2$Gradient.category == "Resource" & dat_2$Trait.type == "Fecundity"])),
length(unique(dat_2$Experiment[dat_2$Gradient.category == "Resource" & dat_2$Trait.type == "Survivorship"]))
),
N_host_taxa = c(length(unique(dat_2$Host[dat_2$Gradient.category == "Environment" & dat_2$Trait.type == "Prevalence"])),
length(unique(dat_2$Host[dat_2$Gradient.category == "Environment" & dat_2$Trait.type == "Intensity"])),
length(unique(dat_2$Host[dat_2$Gradient.category == "Environment" & dat_2$Trait.type == "Fecundity"])),
length(unique(dat_2$Host[dat_2$Gradient.category == "Environment" & dat_2$Trait.type == "Survivorship"])),
length(unique(dat_2$Host[dat_2$Gradient.category == "Pollution" & dat_2$Trait.type == "Prevalence"])),
length(unique(dat_2$Host[dat_2$Gradient.category == "Pollution" & dat_2$Trait.type == "Intensity"])),
length(unique(dat_2$Host[dat_2$Gradient.category == "Pollution" & dat_2$Trait.type == "Fecundity"])),
length(unique(dat_2$Host[dat_2$Gradient.category == "Pollution" & dat_2$Trait.type == "Survivorship"])),
length(unique(dat_2$Host[dat_2$Gradient.category == "Resource" & dat_2$Trait.type == "Prevalence"])),
length(unique(dat_2$Host[dat_2$Gradient.category == "Resource" & dat_2$Trait.type == "Intensity"])),
length(unique(dat_2$Host[dat_2$Gradient.category == "Resource" & dat_2$Trait.type == "Fecundity"])),
length(unique(dat_2$Host[dat_2$Gradient.category == "Resource" & dat_2$Trait.type == "Survivorship"]))
))
rownames(Table3) <- NULL
Table3 %>%
kbl() %>%
kable_material(c("striped", "hover"), full_width = F)
Q2.R <-
rma.mv(
g ~ Trait.type:Gradient.category -1,
V = dat_2$var.g,
random = list(~ 1 | Experiment,  ~ 1 | ID),
data = dat_2,
method = "REML",
)
Q2.R_est <- clubSandwich::coef_test(Q2.R, vcov = "CR2")
forest.default(x= Q2.R_est$beta, sei =  Q2.R_est$SE, pch = 19,
annotate=TRUE, showweights=F, header=c("Parameter", "Estimate [95% CI]"),
slab = c("EE:prevalence", "EE:intensity", "EE:fecundity", "EE:survivorship", "CP:prevalence", "CP:intensity", "CP:fecundity", "CP:survivorship", "RL:prevalence", "RL:intensity", "RL:fecundity", "RL:survivorship"),
xlab = "Standardised mean difference (Hedge's g)")
#' @title Parametric simulation
#' @description Function for calculating I2 estimates using parametric simulations of model estimates taken from metafor. Note that the effectiveness of these simulations depends on the accuracy of model variance estimates.
#' @param estimate The estimate (i.e. variance) from a metafor model
#' @param sims The number of simulations
#' @param n The sample size used in estimating the variance
#' @author Daniel Noble - daniel.noble@anu.edu.au
#' @export
simMonteCarlo <- function(estimate, n, sims){
tmp <- data.frame(num = base::rep(1:sims, each = n),
y = stats::rnorm(n*sims, 0, base::sqrt(estimate)))
Var <- tmp %>% dplyr::group_by(num) %>% dplyr::summarise(Mean_var = stats::var(y))
return(as.numeric(Var$Mean_var))
}
## NOTE about PIPE: Run usethis::use_pipe() in the console. The package usethis will add what you need to import the pipe to your NAMESPACE and it will also drop warnings in checks
# Function for  rounding a data frame
round_df <- function(x, digits) {
numeric_columns <- sapply(x, class) == 'numeric'
x[numeric_columns] <-  round(x[numeric_columns], digits)
x
}
# Function for estimating I2
I2 <- function(model, v, ME = FALSE, sims = 1500, phylo = FALSE, obs = FALSE){
if(class(model) != "rma.mv" && class(model) != "rma"){
stop("The model object is not of class 'metafor'")
}
wi <- 1/v  #weight
Vw <- sum((wi) * (length(wi) - 1))  / (((sum(wi)^2) - sum((wi)^2)))
if("rma.mv" %in% class(model) | "rma" %in% class(model)){
# Monte Carlo Simulations
# From metafor extract the important statistics
sigma2 <- matrix(model$sigma2, nrow = 1, ncol = length(model$sigma2))
colnames(sigma2) <- model$s.names
sigmaN <- model$s.nlevels
if(obs == FALSE){
stop("Please add the name of the observation-level random effect, obs. If models do not include this, re-run models including (~1|obs) in the random effect list")
}
#For each variance estimate use Monte Carlo simulation of data
Sims <- data.frame(mapply(function(x,y) simMonteCarlo(x, y, sims = sims), x = sigma2, y = sigmaN))
colnames(Sims) <- colnames(sigma2)
#Calculate total variance
VT <- rowSums(cbind(Sims, Vw))
Vt <- rowSums(Sims)  # remove Vw
# For each variance component divide by the total variance. Note this needs to be fixed for phylo, but does deal with variable random effects.
I2_re <- Sims / VT
I2_total <- data.frame(Vt / VT)
tmpMatrix <- data.frame(I2_re[, -match("ID", colnames(I2_re))], total = I2_total)
names(tmpMatrix) = c(colnames(I2_re)[!colnames(I2_re) %in% 'ID'], 'total')
CI <- lapply(tmpMatrix, function(x) stats::quantile(x, c(0.025, 0.975), na.rm = TRUE))
I_CI <- as.data.frame(do.call(rbind, CI))
colnames(I_CI) <- c("2.5% CI", "97.5% CI")
I2_table <- cbind(I2_Est. = colMeans(tmpMatrix), I_CI )
class(I2_table) <- c("metaAidR", "data.frame")
return(round_df(I2_table, digits = 4))
}
}
I2.Q1 <- I2(Q1.R, v = dat_1$var.g, obs = "ID")*100
I2.Q1
I2.Q2 <- I2(Q2.R, v = dat_2$var.g, obs = "ID")*100
I2.Q2
# re fit as a mixed effects model with rma.uni
# any fitting method other than "FE" works for a random/mixed effects model
Q1.uni <-
rma.uni(
g ~ Trait.type:Gradient.category + Experiment + ID ,
vi = dat_1$var.g,
data = dat_1,
method = "REML"
)
# get conditional residuals (residuals for each effect)
Q1res <- rstandard.rma.uni(Q1.uni, type = "conditional")
# create colour palette as  gradient of effect size g
nlvl <- length(dat_1$g)
pal <- colorRampPalette(brewer.pal(9, "YlOrRd"))(nlvl)
pal <-pal[order(match(pal,dat_1$g))]
# plot funnel with conditional residuals
metafor::funnel(Q1res$resid, sqrt(dat_1$var.g), level=c(90, 95, 99), shade=c("white", "gray55", "gray75"), col=pal, back = "white", refline=0, legend=TRUE, xlab = "Conditional residual", ylab = "Standard error")
# re fit as a mixed effects model with rma.uni
# any fitting method other than "FE" works for a random/mixed effects model
Q2.uni <-
rma.uni(
g ~ Trait.type:Gradient.category + Experiment + ID,
vi = dat_2$var.g,
data = dat_2,
method = "REML"
)
# get conditional residuals (residuals for each effect)
Q2res <- rstandard.rma.uni(Q2.uni, type = "conditional")
# create colour palette as  gradient of effect size g
nlvl <- length(dat_2$g)
pal <- colorRampPalette(brewer.pal(9, "YlOrRd"))(nlvl)
pal <-pal[order(match(pal,dat_2$g))]
# plot funnel with all conditional residuals
metafor::funnel(Q2res$resid, sqrt(dat_2$var.g), level=c(90, 95, 99), shade=c("white", "gray55", "gray75"), col=pal, back = "white", refline=0, legend=TRUE, xlab = "Conditional residual", ylab = "Standard error")
# get standard errors of effect sizes
dat_1$sei <- sqrt(dat_1$var.g)
# meta regression with SE
d1s1 <- rma.mv(
g ~ 1 + sei,
V = varcovmat_1_PD$mat,
random = list(~ 1 | Experiment, ~ 1 | ID),
data = dat_1,
method = "REML"
)
d1s1
d1s2 <- rma.mv(
g ~ 1 + dat_1$var.g,
V = varcovmat_1_PD$mat,
random = list(~ 1 | Experiment, ~ 1 | ID),
data = dat_1,
method = "REML"
)
d1s2
Q1.B <-
rma.mv(
g ~ Trait.type:Gradient.category + var.g -1,
V = varcovmat_1_PD$mat,
random = list( ~ 1 | Experiment, ~ 1 | ID),
data = dat_1,
method = "REML"
)
summary(Q1.B)
forest.default(x= Q1.B$beta, sei =  Q1.B$se, pch = 19,
annotate=TRUE, showweights=F, header=c("Parameter", "Estimate [95% CI]"),
slab = c("variance", "EE:fecundity", "EE:survivorship", "CP:fecundity", "CP:survivorship", "RL:fecundity", "RL:survivorship"),
xlab = "Standardised mean difference (Hedge's g)")
# get standard errors of effect sizes
dat_2$sei <- sqrt(dat_2$var.g)
# meta regression with SE
d2s1 <- rma.mv(
g ~ 1 + sei,
V = varcovmat_2_PD$mat,
random = list(~ 1 | Experiment, ~ 1 | ID),
data = dat_2,
method = "REML"
)
# meta regression with SE
d2s2 <- rma.mv(
g ~ 1 + dat_2$var.g,
V = varcovmat_2_PD$mat,
random = list(~ 1 | Experiment, ~ 1 | ID),
data = dat_2,
method = "REML"
)
d2s2
Q2.B <-
rma.mv(
g ~ Trait.type:Gradient.category + var.g -1,
V = varcovmat_2_PD$mat,
random = list( ~ 1 | Experiment, ~ 1 | ID),
data = dat_2,
method = "REML"
)
summary(Q2.B)
forest.default(x= Q2.B$beta, sei =  Q2.B$se, pch = 19,
annotate=TRUE, showweights=F, header=c("Parameter", "Estimate [95% CI]"),
slab = c("variance","EE:prevalence", "EE:intensity", "EE:fecundity", "EE:survivorship", "CP:prevalence", "CP:intensity", "CP:fecundity", "CP:survivorship", "RL:prevalence", "RL:intensity", "RL:fecundity", "RL:survivorship"),
xlab = "Standardised mean difference (Hedge's g)")
Q2.B.abs <-
rma.mv(
absolute ~ Trait.type:Gradient.category + var.g -1,
V = varcovmat_2_PD$mat,
random = list(~ 1 | Experiment,  ~ 1 | ID),
data = dat_2,
method = "REML",
)
summary(Q2.B.abs)
forest.default(x= Q2.abs$beta, sei =  Q2.abs$se, ci.lb =  Q2.abs$ci.lb, ci.ub =  Q2.abs$ci.ub,
annotate=TRUE, showweights=T, header=F,
slab = c("EE:prevalence", "EE:intensity","EE:fecundity", "EE:survivorship",
"CP:prevalence", "CP:intensity","CP:fecundity", "CP:survivorship",
"RL:prevalence", "RL:intensity","RL:fecundity","RL:survivorship"))
Q2.B.abs <-
rma.mv(
absolute ~ Trait.type:Gradient.category + var.g -1,
V = varcovmat_2_PD$mat,
random = list(~ 1 | Experiment,  ~ 1 | ID),
data = dat_2,
method = "REML",
)
summary(Q2.B.abs)
forest.default(x= Q2.B.abs$beta, sei =  Q2.B.abs$se, ci.lb =  Q2.B.abs$ci.lb, ci.ub =  Q2.B.abs$ci.ub,
annotate=TRUE, showweights=T, header=F,
slab = c("EE:prevalence", "EE:intensity","EE:fecundity", "EE:survivorship",
"CP:prevalence", "CP:intensity","CP:fecundity", "CP:survivorship",
"RL:prevalence", "RL:intensity","RL:fecundity","RL:survivorship"))
Q2.B.abs <-
rma.mv(
absolute ~ Trait.type:Gradient.category + var.g -1,
V = varcovmat_2_PD$mat,
random = list(~ 1 | Experiment,  ~ 1 | ID),
data = dat_2,
method = "REML",
)
summary(Q2.B.abs)
forest.default(x= Q2.B.abs$beta, sei =  Q2.B.abs$se, pch = 19,
annotate=TRUE, showweights=F, header=c("Parameter", "Estimate [95% CI]"),
slab = c("variance","EE:prevalence", "EE:intensity", "EE:fecundity", "EE:survivorship", "CP:prevalence", "CP:intensity", "CP:fecundity", "CP:survivorship", "RL:prevalence", "RL:intensity", "RL:fecundity", "RL:survivorship"),
xlab = "Standardised mean difference (Hedge's g)")
# Environment
# Prevalence vs Fecundity
anova(Q2.abs, X=c(-1,0,1,0,0,0,0,0,0,0,0,0))
# Prevalence vs Survivorship
anova(Q2.abs, X=c(-1,0,0,1,0,0,0,0,0,0,0,0))
# Intensity vs Fecundity
anova(Q2.abs, X=c(0,-1,1,0,0,0,0,0,0,0,0,0))
# Intensity vs Survivorship
anova(Q2.abs, X=c(0,-1,0,1,0,0,0,0,0,0,0,0))
# Pollution
# Prevalence vs Fecundity
anova(Q2.abs, X=c(0,0,0,0,-1,0,1,0,0,0,0,0))
# Prevalence vs Survivorship
anova(Q2.abs, X=c(0,0,0,0,-1,0,0,1,0,0,0,0))
# Intensity vs Fecundity
anova(Q2.abs, X=c(0,0,0,0,0,-1,1,0,0,0,0,0))
# Intensity vs Survivorship
anova(Q2.abs, X=c(0,0,0,0,0,-1,0,1,0,0,0,0))
# Resources
# Prevalence vs Fecundity
anova(Q2.abs, X=c(0,0,0,0,0,0,0,0,-1,0,1,0))
# Prevalence vs Survivorship
anova(Q2.abs, X=c(0,0,0,0,0,0,0,0,-1,0,0,1))
# Intensity vs Fecundity
anova(Q2.abs, X=c(0,0,0,0,0,0,0,0,0,-1,1,0))
# Intensity vs Survivorship
anova(Q2.abs, X=c(0,0,0,0,0,0,0,0,0,-1,0,1))
# Environment
# Prevalence vs Fecundity
anova(Q2.abs, X=c(-1,0,1,0,0,0,0,0,0,0,0,0))
# Prevalence vs Survivorship
anova(Q2.abs, X=c(-1,0,0,1,0,0,0,0,0,0,0,0))
# Intensity vs Fecundity
anova(Q2.abs, X=c(0,-1,1,0,0,0,0,0,0,0,0,0))
# Intensity vs Survivorship
anova(Q2.abs, X=c(0,-1,0,1,0,0,0,0,0,0,0,0))
# Pollution
# Prevalence vs Fecundity
anova(Q2.abs, X=c(0,0,0,0,-1,0,1,0,0,0,0,0))
# Prevalence vs Survivorship
anova(Q2.abs, X=c(0,0,0,0,-1,0,0,1,0,0,0,0))
# Intensity vs Fecundity
anova(Q2.abs, X=c(0,0,0,0,0,-1,1,0,0,0,0,0))
# Intensity vs Survivorship
anova(Q2.abs, X=c(0,0,0,0,0,-1,0,1,0,0,0,0))
# Resources
# Prevalence vs Fecundity
anova(Q2.abs, X=c(0,0,0,0,0,0,0,0,-1,0,1,0))
# Prevalence vs Survivorship
anova(Q2.abs, X=c(0,0,0,0,0,0,0,0,-1,0,0,1))
# Intensity vs Fecundity
anova(Q2.abs, X=c(0,0,0,0,0,0,0,0,0,-1,1,0))
# Intensity vs Survivorship
anova(Q2.abs, X=c(0,0,0,0,0,0,0,0,0,-1,0,1))
# Environment
# Prevalence vs Fecundity
anova(Q2.B.abs, X=c(0,-1,0,1,0,0,0,0,0,0,0,0,0))
# Prevalence vs Survivorship
anova(Q2.B.abs, X=c(0,-1,0,0,1,0,0,0,0,0,0,0,0))
# Intensity vs Fecundity
anova(Q2.B.abs, X=c(0,0,-1,1,0,0,0,0,0,0,0,0,0))
# Intensity vs Survivorship
anova(Q2.B.abs, X=c(0,0,-1,0,1,0,0,0,0,0,0,0,0))
# Pollution
# Prevalence vs Fecundity
anova(Q2.B.abs, X=c(0,0,0,0,0,-1,0,1,0,0,0,0,0))
# Prevalence vs Survivorship
anova(Q2.B.abs, X=c(0,0,0,0,0,-1,0,0,1,0,0,0,0))
# Intensity vs Fecundity
anova(Q2.B.abs, X=c(0,0,0,0,0,0,-1,1,0,0,0,0,0))
# Intensity vs Survivorship
anova(Q2.B.abs, X=c(0,0,0,0,0,0,-1,0,1,0,0,0,0))
# Resources
# Prevalence vs Fecundity
anova(Q2.B.abs, X=c(0,0,0,0,0,0,0,0,0,-1,0,1,0))
# Prevalence vs Survivorship
anova(Q2.B.abs, X=c(0,0,0,0,0,0,0,0,0,-1,0,0,1))
# Intensity vs Fecundity
anova(Q2.B.abs, X=c(0,0,0,0,0,0,0,0,0,0,-1,1,0))
# Intensity vs Survivorship
anova(Q2.B.abs, X=c(0,0,0,0,0,0,0,0,0,0,-1,0,1))
TableS3 <- data.frame(question = rep(c("Q1", "Q2"), each =  2),
step = rep(c("Step 1", "Step 2"),2),
slope = c(round(d1s1$b[2],3), round(d1s2$b[2],3), round(d2s1$b[2],3), round(d2s2$b[2],3)),
se = c(round(d1s1$se[2],3), round(d1s2$se[2],3), round(d2s1$se[2],3), round(d2s2$se[2],3)),
pval =c(round(d1s1$pval[2],3), round(d1s2$pval[2],3), round(d2s1$pval[2],3), round(d2s2$pval[2],3)))
TableS3 %>%
kbl() %>%
kable_material(c("striped", "hover"), full_width = F)
TableS4 <- data.frame(Stressor_type = Table2$Stressor_type,
Response_trait = Table2$Response_trait,
Overall_mean = Table2$Overall_mean,
Lower_95 = Table2$Lower_95,
Upper_95 = Table2$Upper_95,
P_value = Table2$P_value,
Overall_mean_adjusted = round(Q1.B$beta[-1],3),
Lower_95_adjusted = round(Q1.B$ci.lb[-1],3),
Upper_95_adjusted = round(Q1.B$ci.ub[-1],3),
P_value_adjusted = round(Q1.B$pval[-1],3),
N_effects = Table2$N_effects,
N_experiments = Table2$N_experiments,
N_host_taxa = Table2$N_host_taxa)
TableS4 %>%
kbl() %>%
kable_material(c("striped", "hover"), full_width = T)
TableS5 <- data.frame(Stressor_type = Table3$Stressor_type,
Response_trait = Table3$Response_trait,
Overall_mean = Table3$Overall_mean,
Lower_95 = Table3$Lower_95,
Upper_95 = Table3$Upper_95,
P_value = Table3$P_value,
Overall_mean_adjusted = round(Q2.B$beta[-1],3),
Lower_95_adjusted = round(Q2.B$ci.lb[-1],3),
Upper_95_adjusted = round(Q2.B$ci.ub[-1],3),
P_value_adjusted = round(Q2.B$pval[-1],3),
N_effects = Table3$N_effects,
N_experiments = Table3$N_experiments,
N_host_taxa = Table3$N_host_taxa)
TableS5 %>%
kbl() %>%
kable_material(c("striped", "hover"), full_width = T)
