meta_regression <- predict(best_model, newmods = c(1,0,0,1))
meta_regression
summary(meta_regression)
# Multimodel inference
summary(model.avg(model_selection, revised.var=FALSE)) #Set revised.var = F to get same results as we would with the glmulti package
# relative importance values for the predictors can be obtained with:
importance(model_selection)
# Get the moderators that were included in the best model
best_model$formula.mods
summary(model.avg(c(Q2m1,Q2m2, Q2m3, Q2m4), revised.var=FALSE))
?model.avg
summary(model.avg(list(Q2m1,Q2m2, Q2m3, Q2m4), revised.var=FALSE))
# Now, we take the full model (in this case Q2m4) and fit the rest of the models and examine those models whose AICc value is no more than 2 units away from that of the best model
full_model <- rma.mv(
g,
V = varcovmat_2_PD$mat,
mods = ~ Trait.type : Host.type.2 : Gradient.category -1, # I had to change : for +
random = ~ 1 | ID/Experiment/Parasite,
data = dat_2,
method = "ML" # ML is needed for log-likelihood comparisons with MuMIn, but we will refit with REML.
)
model_selection <- dredge(full_model)
# Now, we take the full model (in this case Q2m4) and fit the rest of the models and examine those models whose AICc value is no more than 2 units away from that of the best model
full_model <- rma.mv(
g,
V = varcovmat_2_PD$mat,
mods = ~ Trait.type : Host.type.2 : Gradient.category , # I had to change : for +
random = ~ 1 | ID/Experiment/Parasite,
data = dat_2,
method = "ML" # ML is needed for log-likelihood comparisons with MuMIn, but we will refit with REML.
)
model_selection <- dredge(full_model, trace=2)
subset(model_selection, delta <= 2, recalc.weights=FALSE)
# Multimodel inference
summary(model.avg(model_selection, revised.var=FALSE)) #Set revised.var = F to get same results as we would with the glmulti package
summary(model.avg(model_selection, revised.var=FALSE)) #Set revised.var = F to get same results as we would with the glmulti package
# Get the model with the lowest AICc and refit with REML.
best_model <- get.models(model_selection, subset = 1, method = "REML")[[1]]
# Get the model with the lowest AICc and refit with REML.
best_model <- get.models(model_selection, subset = 1, method = "REML")[[1]]
summary(best_model)
summary(best_model)
# Now, we take the full model (in this case Q2m4) and fit the rest of the models and examine those models whose AICc value is no more than 2 units away from that of the best model
full_model <- rma.mv(
g,
V = varcovmat_2_PD$mat,
mods = ~ Trait.type : Host.type.2 : Gradient.category -1, # I had to change : for +
random = ~ 1 | ID/Experiment/Parasite,
data = dat_2,
method = "ML" # ML is needed for log-likelihood comparisons with MuMIn, but we will refit with REML.
)
model_selection <- dredge(full_model, trace=2)
subset(model_selection, delta <= 2, recalc.weights=FALSE)
# Multimodel inference
summary(model.avg(model_selection, revised.var=FALSE)) #Set revised.var = F to get same results as we would with the glmulti package
model_selection <- dredge(full_model, trace=2)
subset(model_selection, delta <= 2, recalc.weights=FALSE)
# Multimodel inference
summary(model.avg(model_selection, revised.var=FALSE)) #Set revised.var = F to get same results as we would with the glmulti package
# Now, we take the full model (in this case Q2m4) and fit the rest of the models and examine those models whose AICc value is no more than 2 units away from that of the best model
full_model <- rma.mv(
g,
V = varcovmat_2_PD$mat,
mods = ~ Trait.type + Host.type.2 + Gradient.category -1, # I had to change : for +
random = ~ 1 | ID/Experiment/Parasite,
data = dat_2,
method = "ML" # ML is needed for log-likelihood comparisons with MuMIn, but we will refit with REML.
)
model_selection <- dredge(full_model, trace=2)
model_selection <- dredge(full_model, trace=2)
subset(model_selection, delta <= 2, recalc.weights=FALSE)
# Multimodel inference
summary(model.avg(model_selection, revised.var=FALSE)) #Set revised.var = F to get same results as we would with the glmulti package
# relative importance values for the predictors can be obtained with:
importance(model_selection)
Q2m4 <-
rma.mv(
g ~ Trait.type:Host.type.2:Gradient.category -1,
V = varcovmat_2_PD$mat,
random = list( ~ 1 | ID, ~ 1 | Experiment, ~ 1 | Parasite),
data = dat_2,
method = "ML"
)
Q2m3 <-
rma.mv(
g ~ Trait.type : Gradient.category -1,
V = varcovmat_2_PD$mat,
random = list( ~ 1 |Experiment/ID, ~ 1 | Parasite),
data = dat_2,
method = "ML"
)
Q2m2 <-
rma.mv(
g ~ Trait.type -1 ,
V = varcovmat_2_PD$mat,
random = list( ~ 1 | as.factor(ID), ~ 1 | as.factor(Experiment), ~ 1 | Parasite),
data = dat_2,
method = "ML"
)
Q2m1 <-
rma.mv(
g ~ 1,
V = varcovmat_2_PD$mat,
random = list( ~ 1 | as.factor(ID), ~ 1 | as.factor(Experiment), ~ 1 | Parasite),
data = dat_2,
method = "ML"
)
summary(model.avg(list(Q2m1, Q2m2, Q2m3, Q2m4), revised.var=FALSE))
?subset
?dredge
all <- list(Q2m1, Q2m2, Q2m3, Q2m4)
model_selection <- dredge(all, trace=2)
# Now, we take the full model (in this case Q2m4) and fit the rest of the models and examine those models whose AICc value is no more than 2 units away from that of the best model
full_model <- rma.mv(
g,
V = varcovmat_2_PD$mat,
mods = ~ Trait.type + Host.type.2 + Gradient.category -1, # I had to change : for +
random = ~ 1 | ID/Experiment/Parasite,
data = dat_2,
method = "ML" # ML is needed for log-likelihood comparisons with MuMIn, but we will refit with REML.
)
model_selection <- dredge(full_model, trace=2)
subset(model_selection, delta <= 2, recalc.weights=FALSE)
# Get the model with the lowest AICc and refit with REML.
best_models <- get.models(model_selection, subset = 4, method = "REML")[[1]]
summary(best_models)
summary(best_models)
# Multimodel inference
summary(model.avg(model_selection, revised.var=FALSE)) #Set revised.var = F to get same results as we would with the glmulti package
# relative importance values for the predictors can be obtained with:
importance(model_selection)
# Get the model with the lowest AICc and refit with REML.
best_model <- get.models(model_selection, subset = 1, method = "REML")[[1]]
# Get the model with the lowest AICc and refit with REML.
best_model <- get.models(model_selection, subset = 1, method = "REML")[[1]]
summary(best_model1)
summary(best_model)
summary(best_model)
# Get the moderators that were included in the best model
best_model$formula.mods
best_model
refit.model.selection <- get.models(model_selection, subset = c(1,2,3,4), method = "REML")[[1]]
subset(refit.model.selection, delta <= 2)
refit.model.selection
refit.model.selection <- list(get.models(model_selection, subset = c(1,2,3,4), method = "REML")[[1]])
subset(refit.model.selection, delta <= 2)
refit.model.selection
subset(model_selection, delta <= 2, recalc.weights=FALSE)
model_selection
# Now, we take the full model (in this case Q2m4) and fit the rest of the models and examine those models whose AICc value is no more than 2 units away from that of the best model
full_model <- rma.mv(
g,
V = varcovmat_2_PD$mat,
mods = ~ Trait.type + Host.type.2 + Gradient.category -1, # I had to change : for +
random = ~ 1 | ID/Experiment/Parasite,
data = dat_2,
method = "REML" # ML is needed for log-likelihood comparisons with MuMIn, but we will refit with REML.
)
model_selection <- dredge(full_model, trace=2)
subset(model_selection, delta <= 2, recalc.weights=FALSE)
model_selection
# Multimodel inference
summary(model.avg(model_selection, revised.var=FALSE)) #Set revised.var = F to get same results as we would with the glmulti package
# relative importance values for the predictors can be obtained with:
importance(model_selection)
# Get the model with the lowest AICc and refit with REML.
best_model <- get.models(model_selection, subset = 1, method = "REML")[[1]]
summary(best_model)
summary(best_model)
# Get the model predictions
meta_regression <- predict(best_model, newmods = c(1,0,0,1))
# Now, we take the full model (in this case Q2m4) and fit the rest of the models and examine those models whose AICc value is no more than 2 units away from that of the best model
full_model <- rma.mv(
g,
V = varcovmat_2_PD$mat,
mods = ~ Trait.type : Host.type.2 : Gradient.category -1, # I had to change : for +
random = ~ 1 | ID/Experiment/Parasite,
data = dat_2,
method = "REML" # ML is needed for log-likelihood comparisons with MuMIn, but we will refit with REML
)
model_selection <- dredge(full_model, trace=2)
subset(model_selection, delta <= 2, recalc.weights=FALSE)
model_selection
Q2m4 <-
rma.mv(
g ~ Trait.type:Host.type.2:Gradient.category -1,
V = varcovmat_2_PD$mat,
random = list( ~ 1 | ID, ~ 1 | Experiment, ~ 1 | Parasite),
data = dat_2,
method = "REML"
)
summary(Q2m4)
forest.default(x= Q2m4$beta, sei =  Q2m4$se, ci.lb =  Q2m4$ci.lb, ci.ub =  Q2m4$ci.ub,
annotate=TRUE, showweights=T, header=F,
slab = c("Environment invertebrate intensity", "Environment invertebrate prevalence", "Environment vertebrate intensity", "Environment vertebrate prevalence", "Pollution invertebrate intensity", "Pollution invertebrate prevalence", "Pollution vertebrate intensity", "Pollution vertebrate prevalence", "Resource invertebrate intensity", "Resource invertebrate prevalence", "Resource vertebrate intensity", "Resource vertebrate prevalence"))
model_selection <- dredge(Q2m4, trace=2)
# Now, we take the full model (in this case Q2m4) and fit the rest of the models and examine those models whose AICc value is no more than 2 units away from that of the best model
full_model <- rma.mv(
g,
V = varcovmat_2_PD$mat,
mods = ~ Trait.type : Host.type.2 : Gradient.category -1, # I had to change : for +
random = ~ 1 | ID/Experiment/Parasite,
data = dat_2,
method = "REML" # ML is needed for log-likelihood comparisons with MuMIn, but we will refit with REML
)
model_selection <- dredge(full_model, trace=2)
subset(model_selection, delta <= 2, recalc.weights=FALSE)
summary(Q2m4)
summary(Q2m4)
Q2m4 <-
rma.mv(
g ~ Trait.type:Host.type.2:Gradient.category -1,
V = varcovmat_2_PD$mat,
random = ~ 1 | ID/Experiment/Parasite,
data = dat_2,
method = "REML"
)
summary(Q2m4)
forest.default(x= Q2m4$beta, sei =  Q2m4$se, ci.lb =  Q2m4$ci.lb, ci.ub =  Q2m4$ci.ub,
annotate=TRUE, showweights=T, header=F,
slab = c("Environment invertebrate intensity", "Environment invertebrate prevalence", "Environment vertebrate intensity", "Environment vertebrate prevalence", "Pollution invertebrate intensity", "Pollution invertebrate prevalence", "Pollution vertebrate intensity", "Pollution vertebrate prevalence", "Resource invertebrate intensity", "Resource invertebrate prevalence", "Resource vertebrate intensity", "Resource vertebrate prevalence"))
Q2m4 <-
rma.mv(
g ~ Trait.type:Host.type.2:Gradient.category -1,
V = varcovmat_2_PD$mat,
random = list( ~ 1 | ID, ~ 1 | Experiment, ~ 1 | Parasite),
data = dat_2,
method = "REML"
)
summary(Q2m4)
forest.default(x= Q2m4$beta, sei =  Q2m4$se, ci.lb =  Q2m4$ci.lb, ci.ub =  Q2m4$ci.ub,
annotate=TRUE, showweights=T, header=F,
slab = c("Environment invertebrate intensity", "Environment invertebrate prevalence", "Environment vertebrate intensity", "Environment vertebrate prevalence", "Pollution invertebrate intensity", "Pollution invertebrate prevalence", "Pollution vertebrate intensity", "Pollution vertebrate prevalence", "Resource invertebrate intensity", "Resource invertebrate prevalence", "Resource vertebrate intensity", "Resource vertebrate prevalence"))
# Now, we take the full model (in this case Q2m4) and fit the rest of the models and examine those models whose AICc value is no more than 2 units away from that of the best model
full_model <- rma.mv(
g,
V = varcovmat_2_PD$mat,
mods = ~ Trait.type : Host.type.2 : Gradient.category -1, # I had to change : for +
random = list( ~ 1 | ID, ~ 1 | Experiment, ~ 1 | Parasite),
data = dat_2,
method = "REML" # ML is needed for log-likelihood comparisons with MuMIn, but we will refit with REML
)
model_selection <- dredge(full_model, trace=2)
subset(model_selection, delta <= 2, recalc.weights=FALSE)
# Multimodel inference
summary(model.avg(model_selection, revised.var=FALSE)) #Set revised.var = F to get same results as we would with the glmulti package
# Now, we take the full model (in this case Q2m4) and fit the rest of the models and examine those models whose AICc value is no more than 2 units away from that of the best model
full_model <- rma.mv(
g,
V = varcovmat_2_PD$mat,
mods = ~ Trait.type + Host.type.2 + Gradient.category -1, # I had to change : for +
random = list( ~ 1 | ID, ~ 1 | Experiment, ~ 1 | Parasite),
data = dat_2,
method = "REML" # ML is needed for log-likelihood comparisons with MuMIn, but we will refit with REML
)
model_selection <- dredge(full_model, trace=2)
dat_2.1 <- dat_2[!apply(dat[,c("Trait.type", "Host.type.2", "Gradient.category")], 1, anyNA),]
dat_2.1 <- dat_2[!apply(dat_2[,c("Trait.type", "Host.type.2", "Gradient.category")], 1, anyNA),]
length(dat_2)
length(dat_2.1)
tail(dat_2)
subset(model_selection, delta <= 2, recalc.weights=FALSE)
View(dat_2)
dat_2.1 <- dat_2[!apply(dat_2[,c("Trait.type", "Host.type.2", "Gradient.category", "g")], 1, anyNA),]
subset(model_selection, delta <= 2, recalc.weights=FALSE)
model_selection
# Now, we take the full model (in this case Q2m4) and fit the rest of the models and examine those models whose AICc value is no more than 2 units away from that of the best model
full_model <- rma.mv(
g,
V = varcovmat_2_PD$mat,
mods = ~ Trait.type : Host.type.2 : Gradient.category -1, # I had to change : for +
random = list( ~ 1 | ID, ~ 1 | Experiment, ~ 1 | Parasite),
data = dat_2,
method = "REML" # ML is needed for log-likelihood comparisons with MuMIn, but we will refit with REML
)
# Now, we take the full model (in this case Q2m4) and fit the rest of the models and examine those models whose AICc value is no more than 2 units away from that of the best model
full_model <- rma.mv(
g,
V = varcovmat_2_PD$mat,
mods = ~ Trait.type : Host.type.2 : Gradient.category -1, # I had to change : for +
random = list( ~ 1 | ID, ~ 1 | Experiment, ~ 1 | Parasite),
data = dat_2,
method = "REML" # ML is needed for log-likelihood comparisons with MuMIn, but we will refit with REML
)
model_selection <- dredge(full_model, trace=2) #warning that number of observations are different between models
subset(model_selection, delta <= 2, recalc.weights=FALSE)
# Now, we take the full model (in this case Q2m4) and fit the rest of the models and examine those models whose AICc value is no more than 2 units away from that of the best model
full_model <- rma.mv(
g,
V = varcovmat_2_PD$mat,
mods = ~ Trait.type + Host.type.2 + Gradient.category -1, # I had to change : for +
random = list( ~ 1 | ID, ~ 1 | Experiment, ~ 1 | Parasite),
data = dat_2,
method = "REML" # ML is needed for log-likelihood comparisons with MuMIn, but we will refit with REML
)
model_selection <- dredge(full_model, trace=2) #warning that number of observations are different between models
subset(model_selection, delta <= 2, recalc.weights=FALSE)
# Multimodel inference
summary(model.avg(model_selection, revised.var=FALSE)) #Set revised.var = F to get same results as we would with the glmulti package
# relative importance values for the predictors can be obtained with:
importance(model_selection)
# Now, we take the full model (in this case Q2m4) and fit the rest of the models and examine those models whose AICc value is no more than 2 units away from that of the best model
full_model <- rma.mv(
g,
V = varcovmat_2_PD$mat,
mods = ~ Trait.type + Host.type.2 + Gradient.category -1, # I had to change : for +
random = list( ~ 1 | ID, ~ 1 | Experiment, ~ 1 | Parasite),
data = dat_2,
method = "ML" # is ML is needed for log-likelihood comparisons with MuMIn?,
)
model_selection <- dredge(full_model, trace=2) #warning that number of observations are different between models
subset(model_selection, delta <= 2, recalc.weights=FALSE)
# Multimodel inference
summary(model.avg(model_selection, revised.var=FALSE)) #Set revised.var = F to get same results as we would with the glmulti package
# relative importance values for the predictors can be obtained with:
importance(model_selection)
# Attempt with glmulti
install.packages("glmulti")
library(glmulti)
install.packages("rJava")
# Attempt with glmulti
install.packages("glmulti")
library(glmulti)
library(rJava)
install.packages("rJava")
library(rJava)
library(rJava)
install.packages("rJava")
library(rJava)
library(rJava)
library(rJava)
library(glmulti)
# Attempt with glmulti
install.packages("glmulti")
library(glmulti)
library(rJava)
library(rJava)
library(glmulti)
install.packages("rJava")
library(rJava)
library(glmulti)
Sys.setenv(JAVA_HOME="C:\Users\amandavicente\Downloads\")
library(rJava)
Sys.setenv(JAVA_HOME="C:Users\amandavicente\Downloads\")
library(rJava)
# First, we evaluate some code that generates helper functions needed so that metafor and MuMIn could interact as necessary
eval(metafor:::.MuMIn)
# Now, we take the full model (in this case Q2m4) and fit the rest of the models and examine those models whose AICc value is no more than 2 units away from that of the best model
full_model <- rma.mv(
g,
V = varcovmat_2_PD$mat,
mods = ~ Trait.type + Host.type.2 + Gradient.category -1, # I had to change : for +
random = list( ~ 1 | ID, ~ 1 | Experiment, ~ 1 | Parasite),
data = dat_2,
method = "ML" # is ML is needed for log-likelihood comparisons with MuMIn?,
)
model_selection <- dredge(full_model, trace=2) #warning that number of observations are different between models
subset(model_selection, delta <= 2, recalc.weights=FALSE)
# Multimodel inference
summary(model.avg(model_selection, revised.var=FALSE)) #Set revised.var = F to get same results as we would with the glmulti package
# relative importance values for the predictors can be obtained with:
importance(model_selection)
#How do we get model predictions?
# Now, we take the full model (in this case Q2m4) and fit the rest of the models and examine those models whose AICc value is no more than 2 units away from that of the best model
full_model <- rma.mv(
g,
V = varcovmat_2_PD$mat,
mods = ~ Trait.type + Host.type.2 + Gradient.category -1, # I had to change : for +
random = list( ~ 1 | ID, ~ 1 | Experiment, ~ 1 | Parasite),
data = dat_2,
method = "ML" # is ML is needed for log-likelihood comparisons with MuMIn?,
)
model_selection <- dredge(full_model, trace=2) #warning that number of observations are different between models
model_selection <- dredge(full_model, trace=2) #warning that number of observations are different between models
model_selection <- dredge(full_model, trace=2) #warning that number of observations are different between models
subset(model_selection, delta <= 2, recalc.weights=FALSE)
model_selection
?dredge
# Now, we take the full model (in this case Q2m4) and fit the rest of the models and examine those models whose AICc value is no more than 2 units away from that of the best model
full_model <- rma.mv(
g,
V = varcovmat_2_PD$mat,
mods = ~ Trait.type * Host.type.2 * Gradient.category,
random = list( ~ 1 | ID, ~ 1 | Experiment, ~ 1 | Parasite),
data = dat_2,
method = "ML" # is ML is needed for log-likelihood comparisons with MuMIn?,
)
model_selection <- dredge(full_model, trace=2) #warning that number of observations are different between models
subset(model_selection, delta <= 2, recalc.weights=FALSE)
subset(model_selection, delta <= 10, recalc.weights=FALSE)
subset(model_selection, delta <= 10, recalc.weights=FALSE)
subset(model_selection, delta <= 10, recalc.weights=FALSE)
subset(model_selection, delta <= 10, recalc.weights=FALSE)
# relative importance values for the predictors can be obtained with:
importance(model_selection)
# Now, we take the full model (in this case Q2m4) and fit the rest of the models and examine those models whose AICc value is no more than 2 units away from that of the best model
full_model <- rma.mv(
g,
V = varcovmat_2_PD$mat,
mods = ~ Trait.type * Gradient.category,
random = list( ~ 1 | ID, ~ 1 | Experiment, ~ 1 | Parasite),
data = dat_2,
method = "ML"
)
model_selection <- dredge(full_model, trace=2) #warning that number of observations are different between models
subset(model_selection, delta <= 10, recalc.weights=FALSE)
# relative importance values for the predictors can be obtained with:
importance(model_selection)
# Multimodel inference
summary(model.avg(model_selection, revised.var=FALSE)) #Set revised.var = F to get same results as we would with the glmulti package
# Now, we take the full model (in this case Q2m4) and fit the rest of the models and examine those models whose AICc value is no more than 2 units away from that of the best model
full_model <- rma.mv(
g,
V = varcovmat_2_PD$mat,
mods = ~ Trait.type * Gradient.category - 1,
random = list( ~ 1 | ID, ~ 1 | Experiment, ~ 1 | Parasite),
data = dat_2,
method = "ML"
)
model_selection <- dredge(full_model, trace=2) #warning that number of observations are different between models
subset(model_selection, delta <= 10, recalc.weights=FALSE)
# Multimodel inference
summary(model.avg(model_selection, revised.var=FALSE)) #Set revised.var = F to get same results as we would with the glmulti package
# relative importance values for the predictors can be obtained with:
importance(model_selection)
# Multimodel inference
average.model <- model.avg(model_selection, revised.var=FALSE)
summary(average.model) #Set revised.var = F to get same results as we would with the glmulti package
#How do we get model predictions?
predict(average.model, data.frame("Gradient.category" = c("Environment", "Pollution", "Resource", "Environment", "Pollution", "Resource"), "Trait.type" = c("Intensity", "Intensity", "Intensity", "Prevalence", "Prevalence", "Prevalence")), se.fit = T)
?model.avg
# Multimodel inference
average.model <- model.avg(model_selection, revised.var=FALSE, fit = T)
# Pick the best model
best_model <- get.models(model_selection, subset = 1, method = "REML")[[1]]
summary(best_model)
summary(best_model)
predict(average.model, newdata = data.frame("Gradient.category" = c("Environment", "Pollution", "Resource", "Environment", "Pollution", "Resource"), "Trait.type" = c("Intensity", "Intensity", "Intensity", "Prevalence", "Prevalence", "Prevalence")), se.fit = T)
average.model
# Now, we take the full model (in this case Q2m4) and fit the rest of the models and examine those models whose AICc value is no more than 2 units away from that of the best model
full_model <- rma.mv(
g,
V = varcovmat_2_PD$mat,
mods = ~ Trait.type * Gradient.category - 1,
random = list( ~ 1 | ID, ~ 1 | Experiment, ~ 1 | Parasite),
data = dat_2,
method = "ML"
)
model_selection <- dredge(full_model, trace=2)
model_selection <- dredge(full_model, trace=2)
subset(model_selection, delta <= 10, recalc.weights=FALSE)
# Multimodel inference
average.model <- model.avg(model_selection, revised.var=FALSE, fit = T)
average.model
# Multimodel inference
average.model <- model.sel(model_selection, fit = T)
#How do we get model predictions?
predict(average.model, newdata = NULL, se.fit = T)
#How do we get model predictions?
predict.averaging(average.model, newdata = NULL, se.fit = T)
# Now, we take the full model and fit the rest of the models and examine those models whose AICc value is no more than 10 units away from that of the best model
full_model <- rma.mv(
g,
V = varcovmat_1_PD$mat,
mods = ~ Trait.category * Trait.type * Gradient.category - 1,
random = list( ~ 1 | ID, ~ 1 | Experiment, ~ 1 | Parasite),
data = dat_3,
method = "ML"
)
# Now, we take the full model and fit the rest of the models and examine those models whose AICc value is no more than 10 units away from that of the best model
full_model <- rma.mv(
g,
V = varcovmat_1_PD$mat,
mods = ~ Trait.category * Trait.type * Gradient.category - 1,
random = list( ~ 1 | ID, ~ 1 | Experiment, ~ 1 | Parasite),
data = dat_1,
method = "ML"
)
# Now, we take the full model and fit the rest of the models and examine those models whose AICc value is no more than 10 units away from that of the best model
full_model <- rma.mv(
g,
V = varcovmat_1_PD$mat,
mods = ~ Trait.category * Trait.type * Gradient.category - 1,
random = list( ~ 1 | ID, ~ 1 | Experiment, ~ 1 | Parasite),
data = dat_1,
method = "ML"
)
model_selection <- dredge(full_model, trace=2)
subset(model_selection, delta <= 10, recalc.weights=FALSE)
subset(model_selection, delta <= 10, recalc.weights=FALSE)
# Multimodel inference
average.model <- model.avg(model_selection, revised.var=FALSE, fit = T)
# Multimodel inference
average.model <- model.avg(model_selection, revised.var=FALSE) #fit = T, Set revised.var = F to get same results as we would with the glmulti package
summary(average.model)
# relative importance values for the predictors can be obtained with:
importance(model_selection)
full_model <- rma.mv(
g,
V = varcovmat_3_PD$mat,
mods = ~ Trait.category * Trait.type * Gradient.category - 1,
random = list( ~ 1 | ID, ~ 1 | Experiment, ~ 1 | Parasite),
data = dat_3,
method = "ML"
)
model_selection <- dredge(full_model, trace=2)
subset(model_selection, delta <= 10, recalc.weights=FALSE)
# Multimodel inference
average.model <- model.avg(model_selection, revised.var=FALSE) #fit = T, Set revised.var = F to get same results as we would with the glmulti package
summary(average.model)
# relative importance values for the predictors can be obtained with:
importance(model_selection)
