length(dat_1$g),
length(unique(dat_1$Experiment)),
length(unique(dat_1$Host[which(dat_1$Host.type == "Arthropod")])),
length(unique(dat_1$Host[which(dat_1$Host.type == "Mollusc")])),
length(unique(dat_1$Host[which(dat_1$Host.type == "Fish")])),
length(unique(dat_1$Host[which(dat_1$Host.type == "Amphibian")])),
length(unique(dat_1$Host[which(dat_1$Host.type == "Reptile")])),
length(unique(dat_1$Host[which(dat_1$Host.type == "Bird")])),
length(unique(dat_1$Host[which(dat_1$Host.type == "Mammal")])),
length(unique(dat_1$Parasite[which(dat_1$Parasite.type ==
"Virus")])),
length(unique(dat_1$Parasite[which(dat_1$Parasite.type ==
"Bacteria")])),
length(unique(dat_1$Parasite[which(dat_1$Parasite.type ==
"Multiple")])),
length(unique(dat_1$Parasite[which(dat_1$Parasite.type ==
"Fungus")])),
length(unique(dat_1$Parasite[which(dat_1$Parasite.type ==
"Protozoan")])),
length(unique(dat_1$Parasite[which(dat_1$Parasite.type ==
"Helminth")])),
length(dat_1$Experiment[which(dat_1$Gradient.category ==
"Environment")]),
length(dat_1$Experiment[which(dat_1$Gradient.category ==
"Pollution")]),
length(dat_1$Experiment[which(dat_1$Gradient.category ==
"Resource")]),
length(dat_1$ID[which(dat_1$Trait.category == "Epidemiological")]),
length(dat_1$ID[which(dat_1$Trait.type == "Prevalence")]),
length(dat_1$ID[which(dat_1$Trait.type == "Intensity")]),
length(dat_1$ID[grep("demographic", dat_1$Trait.category)]),
length(dat_1$ID[which(dat_1$Trait.type == "Survivorship")]),
length(dat_1$ID[which(dat_1$Trait.type == "Fecundity")])
),
Question_2 = c(
length(unique(dat_2$Study)),
length(dat_2$g),
length(unique(dat_2$Experiment)),
length(unique(dat_2$Host[which(dat_2$Host.type == "Arthropod")])),
length(unique(dat_2$Host[which(dat_2$Host.type == "Mollusc")])),
length(unique(dat_2$Host[which(dat_2$Host.type == "Fish")])),
length(unique(dat_2$Host[which(dat_2$Host.type == "Amphibian")])),
length(unique(dat_2$Host[which(dat_2$Host.type == "Reptile")])),
length(unique(dat_2$Host[which(dat_2$Host.type == "Bird")])),
length(unique(dat_2$Host[which(dat_2$Host.type == "Mammal")])),
length(unique(dat_2$Parasite[which(dat_2$Parasite.type ==
"Virus")])),
length(unique(dat_2$Parasite[which(dat_2$Parasite.type ==
"Bacteria")])),
length(unique(dat_2$Parasite[which(dat_2$Parasite.type ==
"Multiple")])),
length(unique(dat_2$Parasite[which(dat_2$Parasite.type ==
"Fungus")])),
length(unique(dat_2$Parasite[which(dat_2$Parasite.type ==
"Protozoan")])),
length(unique(dat_2$Parasite[which(dat_2$Parasite.type ==
"Helminth")])),
length(dat_2$Experiment[which(dat_2$Gradient.category ==
"Environment")]),
length(dat_2$Experiment[which(dat_2$Gradient.category ==
"Pollution")]),
length(dat_2$Experiment[which(dat_2$Gradient.category ==
"Resource")]),
length(dat_2$ID[which(dat_2$Trait.category == "Epidemiological")]),
length(dat_2$ID[which(dat_2$Trait.type == "Prevalence")]),
length(dat_2$ID[which(dat_2$Trait.type == "Intensity")]),
length(dat_2$ID[grep("demographic", dat_2$Trait.category)]),
length(dat_2$ID[which(dat_2$Trait.type == "Survivorship")]),
length(dat_2$ID[which(dat_2$Trait.type == "Fecundity")])
),
Question_3 = c(
length(unique(dat_3$Study)),
length(dat_3$g),
length(unique(dat_3$Experiment)),
length(unique(dat_3$Host[which(dat_3$Host.type == "Arthropod")])),
length(unique(dat_3$Host[which(dat_3$Host.type == "Mollusc")])),
length(unique(dat_3$Host[which(dat_3$Host.type == "Fish")])),
length(unique(dat_3$Host[which(dat_3$Host.type == "Amphibian")])),
length(unique(dat_3$Host[which(dat_3$Host.type == "Reptile")])),
length(unique(dat_3$Host[which(dat_3$Host.type == "Bird")])),
length(unique(dat_3$Host[which(dat_3$Host.type == "Mammal")])),
length(unique(dat_3$Parasite[which(dat_3$Parasite.type ==
"Virus")])),
length(unique(dat_3$Parasite[which(dat_3$Parasite.type ==
"Bacteria")])),
length(unique(dat_3$Parasite[which(dat_3$Parasite.type ==
"Multiple")])),
length(unique(dat_3$Parasite[which(dat_3$Parasite.type ==
"Fungus")])),
length(unique(dat_3$Parasite[which(dat_3$Parasite.type ==
"Protozoan")])),
length(unique(dat_3$Parasite[which(dat_3$Parasite.type ==
"Helminth")])),
length(dat_3$Experiment[which(dat_3$Gradient.category ==
"Environment")]),
length(dat_3$Experiment[which(dat_3$Gradient.category ==
"Pollution")]),
length(dat_3$Experiment[which(dat_3$Gradient.category ==
"Resource")]),
length(dat_3$ID[which(dat_3$Trait.category == "Epidemiological")]),
length(dat_3$ID[which(dat_3$Trait.type == "Prevalence")]),
length(dat_3$ID[which(dat_3$Trait.type == "Intensity")]),
length(dat_3$ID[grep("demographic", dat_3$Trait.category)]),
length(dat_3$ID[which(dat_3$Trait.type == "Survivorship")]),
length(dat_3$ID[which(dat_3$Trait.type == "Fecundity")])
)
)
d_stats %>%
kbl() %>%
kable_material(c("striped", "hover"), full_width = F)
Q1m1 <-
rma.mv(
g ~ 1,
V = varcovmat_1_PD$mat,
random = list(  ~ 1 |Experiment/ID, ~ 1 | Parasite),
data = dat_1,
method = "REML"
)
summary(Q1m1)
Q1m2 <-
rma.mv(
g ~ Trait.category:Trait.type -1,
V = varcovmat_1_PD$mat,
random = list( ~ 1 | as.factor(ID), ~ 1 | as.factor(Experiment), ~ 1 | Parasite),
data = dat_1,
method = "REML"
)
summary(Q1m2)
forest.default(x= Q1m2$beta, sei =  Q1m2$se, ci.lb =  Q1m2$ci.lb, ci.ub =  Q1m2$ci.ub,
annotate=TRUE, showweights=T, header=F,
slab = c("Infected fecundity", "Uninfected fecundity",
"Infected survivorship", "Uninfected survivorship"))
Q1m3 <-
rma.mv(
g ~ Trait.category : Trait.type : Gradient.category -1,
V = varcovmat_1_PD$mat,
random = list( ~ 1 | Experiment/ID, ~ 1 | Parasite),
data = dat_1,
method = "REML"
)
summary(Q1m3)
forest.default(x= Q1m3$beta, sei =  Q1m3$se, ci.lb =  Q1m3$ci.lb, ci.ub =  Q1m3$ci.ub,
annotate=TRUE, showweights=T, header=F,
slab = c("Environment infected fecundity", "Environment uninfected fecundity", "Environment infected survivorship", "Environment uninfected survivorship", "Pollution infected fecundity", "Pollution uninfected fecundity", "Pollution infected survivorship", "Pollution uninfected survivorship", "Resource infected fecundity", "Resource uninfected fecundity", "Resource infected survivorship", "Resource uninfected survivorship"))
Q1m4 <-
rma.mv(
g ~ Trait.type:Gradient.category -1 ,
V = varcovmat_1_PD$mat,
random = list( ~ 1 | Experiment/ID, ~ 1 | Parasite),
data = dat_1,
method = "REML"
)
summary(Q1m4)
forest.default(x= Q1m4$beta, sei =  Q1m4$se, ci.lb =  Q1m4$ci.lb, ci.ub =  Q1m4$ci.ub,
annotate=TRUE, showweights=T, header=F,
slab = c("Environment fecundity", "Environment survivorship", "Pollution  fecundity", "Pollution  survivorship", "Resource  fecundity", "Resource  survivorship"))
Q1m5 <-
rma.mv(
g ~ Trait.category:Host.type.2 -1,
V = varcovmat_1_PD$mat,
random = list( ~ 1 | ID, ~ 1 | Experiment, ~ 1 | Parasite),
data = dat_1,
method = "REML"
)
summary(Q1m5)
forest.default(x= Q1m5$beta, sei =  Q1m5$se, ci.lb =  Q1m5$ci.lb, ci.ub =  Q1m5$ci.ub,
annotate=TRUE, showweights=T, header=F,
slab = c("Invertebrate infected", "Invertebrate uninfected", "Vertebrate infected", "Vertebrate  uninfected"))
Q1m6 <-
rma.mv(
g ~ Trait.category:Gradient.category:Host.type.2 -1,
V = varcovmat_1_PD$mat,
random = list( ~ 1 | ID, ~ 1 | Experiment, ~ 1 | Parasite),
data = dat_1,
method = "REML"
)
summary(Q1m6)
forest.default(x= Q1m6$beta, sei =  Q1m6$se, ci.lb =  Q1m6$ci.lb, ci.ub =  Q1m6$ci.ub,
annotate=TRUE, showweights=T, header=F,
slab = c("Environment invertebrate infected", "Environment invertebrate uninfected", "Pollution invertebrate infected", "Pollution invertebrate uninfected", "Resource invertebrate infected", "Resource invertebrate uninfected", "Environment vertebrate infected", "Environment vertebrate uninfected", "Pollution vertebrate infected", "Pollution vertebrate uninfected", "Resource vertebrate infected", "Resource vertebrate uninfected"))
Q1m7 <-
rma.mv(
g ~ Trait.type:Gradient.category:Host.type.2 -1,
V = varcovmat_1_PD$mat,
random = list( ~ 1 | ID, ~ 1 | Experiment, ~ 1 | Parasite),
data = dat_1,
method = "REML"
)
summary(Q1m7)
forest.default(x= Q1m7$beta, sei =  Q1m7$se, ci.lb =  Q1m7$ci.lb, ci.ub =  Q1m7$ci.ub,
annotate=TRUE, showweights=T, header=F,
slab = c("Environment invertebrate fecundity", "Environment invertebrate survivorship", "Pollution invertebrate fecundity", "Pollution invertebrate survivorship", "Resource invertebrate fecundity", "Resource invertebrate survivorship", "Environment vertebrate survivorship", "Pollution vertebrate survivorship", "Resource vertebrate survivorship"))
Q1m8 <-
rma.mv(
g ~ Gradient.category:Host.type.2 -1,
V = varcovmat_1_PD$mat,
random = list( ~ 1 | ID, ~ 1 | Experiment, ~ 1 | Parasite),
data = dat_1,
method = "REML"
)
summary(Q1m8)
forest.default(x= Q1m8$beta, sei =  Q1m8$se, ci.lb =  Q1m8$ci.lb, ci.ub =  Q1m8$ci.ub,
annotate=TRUE, showweights=T, header=F,
slab = c("Environment invertebrate", "Pollution invertebrate", "Resource invertebrate", "Environment vertebrate", "Pollution vertebrate", "Resource vertebrate "))
#All models
AICtab(Q1m1, Q1m2, Q1m3, Q1m4, Q1m5, Q1m6, Q1m7, Q1m8, mnames = LETTERS[1:8], delta = TRUE, weights = TRUE)
# Without Q1m7
AICtab(Q1m1, Q1m2, Q1m3, Q1m4, Q1m5, Q1m6, Q1m8, mnames = LETTERS[1:7], delta = TRUE, weights = TRUE)
# First, we evaluate some code that generates helper functions needed so that metafor and MuMIn could interact as necessary
eval(metafor:::.MuMIn)
# Now, we take the full model and fit the rest of the models and examine those models whose AICc value is no more than 10 units away from that of the best model
full_model <- rma.mv(
g,
V = varcovmat_1_PD$mat,
mods = ~ Trait.category * Trait.type * Gradient.category - 1,
random = list( ~ 1 | ID, ~ 1 | Experiment, ~ 1 | Parasite),
data = dat_1,
method = "ML"
)
model_selection <- dredge(full_model, trace=2)
subset(model_selection, delta <= 10, recalc.weights=FALSE)
# Multimodel inference
average.model <- model.avg(model_selection, revised.var=FALSE) #fit = T, Set revised.var = F to get same results as we would with the glmulti package
summary(average.model)
# relative importance values for the predictors can be obtained with:
importance(model_selection)
#How do we get model predictions?
Q2m1 <-
rma.mv(
g ~ 1,
V = varcovmat_2_PD$mat,
random = list( ~ 1 | as.factor(ID), ~ 1 | as.factor(Experiment), ~ 1 | Parasite),
data = dat_2,
method = "REML"
)
summary(Q2m1)
Q2m2 <-
rma.mv(
g ~ Trait.type -1 ,
V = varcovmat_2_PD$mat,
random = list( ~ 1 | as.factor(ID), ~ 1 | as.factor(Experiment), ~ 1 | Parasite),
data = dat_2,
method = "REML"
)
summary(Q2m2)
forest.default(x= Q2m2$beta, sei =  Q2m2$se, ci.lb =  Q2m2$ci.lb, ci.ub =  Q2m2$ci.ub,
annotate=TRUE, showweights=T, header=F,
slab = c("Intensity", "Prevalence"))
Q2m3 <-
rma.mv(
g ~ Trait.type : Gradient.category -1,
V = varcovmat_2_PD$mat,
random = list( ~ 1 |Experiment/ID, ~ 1 | Parasite),
data = dat_2,
method = "REML"
)
summary(Q2m3)
forest.default(x= Q2m3$beta, sei =  Q2m3$se, ci.lb =  Q2m3$ci.lb, ci.ub =  Q2m3$ci.ub,
annotate=TRUE, showweights=T, header=F,
slab = c("Environment intensity", "Environment prevalence", "Pollution intensity", "Pollution prevalence", "Resource intensity", "Resource prevalence"))
Q2m4 <-
rma.mv(
g ~ Trait.type:Host.type.2:Gradient.category -1,
V = varcovmat_2_PD$mat,
random = list( ~ 1 | ID, ~ 1 | Experiment, ~ 1 | Parasite),
data = dat_2,
method = "REML"
)
summary(Q2m4)
forest.default(x= Q2m4$beta, sei =  Q2m4$se, ci.lb =  Q2m4$ci.lb, ci.ub =  Q2m4$ci.ub,
annotate=TRUE, showweights=T, header=F,
slab = c("Environment invertebrate intensity", "Environment invertebrate prevalence", "Environment vertebrate intensity", "Environment vertebrate prevalence", "Pollution invertebrate intensity", "Pollution invertebrate prevalence", "Pollution vertebrate intensity", "Pollution vertebrate prevalence", "Resource invertebrate intensity", "Resource invertebrate prevalence", "Resource vertebrate intensity", "Resource vertebrate prevalence"))
AICtab(Q2m1, Q2m2, Q2m3, Q2m4, mnames = LETTERS[1:4], delta = TRUE, weights = TRUE)
# First, we evaluate some code that generates helper functions needed so that metafor and MuMIn could interact as necessary
eval(metafor:::.MuMIn)
# Now, we take the full model (in this case Q2m4) and fit the rest of the models and examine those models whose AICc value is no more than 2 units away from that of the best model
full_model <- rma.mv(
g,
V = varcovmat_2_PD$mat,
mods = ~ Trait.type * Gradient.category - 1,
random = list( ~ 1 | ID, ~ 1 | Experiment, ~ 1 | Parasite),
data = dat_2,
method = "ML"
)
model_selection <- dredge(full_model, trace=2)
subset(model_selection, delta <= 10, recalc.weights=FALSE)
# Multimodel inference
average.model <- model.avg(model_selection, revised.var=FALSE, fit = T)
# Using glmulti package
rma.glmulti <- function(formula, data, random, ...)
rma.glmulti <- function(formula, data, random, ...)
rma.mv(formula, vi, data=data, random=random, method="ML", ...) #To compare models, we have to use ML
rma.glmulti <- function(formula, data, random, ...)
rma.mv(formula, vi, data=data, random=random, method="ML", ...) #To compare models, we have to use ML
res <- glmulti(g ~ Trait.type * Gradient.category - 1, data=dat_2,
level=1, fitfunction=rma.glmulti, crit="aicc", confsetsize=128,
random = list( ~ 1 | ID, ~ 1 | Experiment, ~ 1 | Parasite))
rma.glmulti <- function(formula, data, ...)
rma.mv(formula, vi, random = ~ 1 | ID / Experiment / Parasite, data=data, method="ML", ...)
res <- glmulti(g ~ Trait.type * Gradient.category - 1, data=dat_2,
level=1, fitfunction=rma.glmulti, crit="aicc")
res <- glmulti(g ~ Trait.type * Gradient.category - 1,
vi = varcovmat_2_PD$mat, data = dat_2,
level = 1, fitfunction=rma.glmulti, crit="aicc")
rma.glmulti <- function(formula, data, random, ...)
rma.mv(formula, vi, data=data, random=random, method="ML", ...) #To compare models, we have to use ML
res <- glmulti(g ~ Trait.type * Gradient.category - 1,
vi = varcovmat_2_PD$mat, data = dat_2,
random = list( ~ 1 | ID, ~ 1 | Experiment, ~ 1 | Parasite),
level = 1, fitfunction=rma.glmulti, crit="aicc")
?glmulti
?rma.mv
?rma
?rma.mv
# Using glmulti package
rma.glmulti <- function(formula, V, data, random, ...)
rma.mv(formula, V, data=data, random=random, method="ML", ...) #To compare models, we have to use ML
res <- glmulti(formula = g ~ Trait.type * Gradient.category - 1,
V = varcovmat_2_PD$mat, data = dat_2,
random = list( ~ 1 | ID, ~ 1 | Experiment, ~ 1 | Parasite),
fitfunction=rma.glmulti, crit="aicc")
print(res)
rma.glmulti <- function(formula, V, data, random, ...)
rma.mv(formula, V, data=data, random=random, method="ML", ...) #To compare models, we have to use
res <- glmulti(formula = g ~ Trait.type * Gradient.category - 1,
V = varcovmat_2_PD$mat, data = dat_2,
random = list( ~ 1 | ID, ~ 1 | Experiment, ~ 1 | Parasite),
fitfunction=rma.glmulti, crit="aicc")
# Using glmulti package
rma.mv.glmulti <- function(formula, data, random, ...)
rma.mv(formula, V, data=data, random=random, method="ML", ...) #To compare models, we have to use ML
?rma.mv.glmulti
res <- glmulti(formula = g ~ Trait.type + Gradient.category,
V = varcovmat_2_PD$mat, data = dat_2,
random = list( ~ 1 | ID, ~ 1 | Experiment, ~ 1 | Parasite),
fitfunction=rma.mv.glmulti, crit="aicc")
rma.glmulti <- function(formula, data, random, ...)
rma.mv(formula, vi, data=data, random = ~ 1 | id, method="ML", ...)
res <- glmulti(g ~ Trait.type + Gradient.category, data=dat_2,
level=1, fitfunction=rma.glmulti, crit="aicc", confsetsize=128)
res <- glmulti(g ~ Trait.type + Gradient.category, data=dat_2,
vi = varcovmat_2_PD$mat,
random = list( ~ 1 | ID, ~ 1 | Experiment, ~ 1 | Parasite),
level=1, fitfunction=rma.glmulti, crit="aicc", confsetsize=128)
res <- glmulti(g ~ Trait.type + Gradient.category, data=dat_2,
vi = varcovmat_2_PD$mat,
random = list( ~ 1 | ID, ~ 1 | Experiment, ~ 1 | Parasite),
level=2, fitfunction=rma.glmulti, crit="aicc")
# Using glmulti package
rma.glmulti <- function(formula, data, V, random, ...) {
do.call("rma.mv", list(as.formula(paste(deparse(formula))), V = as.name(V),
data=data, random = as.name(random), method="ML", ...))#To compare models, we have to use ML
}
res <- glmulti(g ~ Trait.type + Gradient.category, data=dat_2,
V = varcovmat_2_PD$mat,
random = list( ~ 1 | ID, ~ 1 | Experiment, ~ 1 | Parasite),
level = 1, fitfunction = rma.glmulti, crit="aicc")
# Using glmulti package
rma.glmulti <- function(formula, data, V, random, ...) {
do.call("rma.mv", list(as.formula(paste(deparse(formula))), V = as.name(V),
data=data, random = random, method="ML", ...))#To compare models, we have to use ML
}
res <- glmulti(g ~ Trait.type + Gradient.category, data=dat_2,
V = varcovmat_2_PD$mat,
random = list( ~ 1 | ID, ~ 1 | Experiment, ~ 1 | Parasite),
level = 1, fitfunction = rma.glmulti, crit="aicc")
# Using glmulti package
rma.glmulti <- function(formula, data, V, random, ...) {
do.call("rma.mv", list(as.formula(paste(deparse(formula))), V = V,
data=data, random = random, method="ML", ...))#To compare models, we have to use ML
}
res <- glmulti(g ~ Trait.type + Gradient.category, data=dat_2,
V = varcovmat_2_PD$mat,
random = list( ~ 1 | ID, ~ 1 | Experiment, ~ 1 | Parasite),
level = 1, fitfunction = rma.glmulti, crit="aicc")
rank.models <- weightable(res)
rank.models
res <- glmulti(g ~ Trait.type * Gradient.category -1, data=dat_2,
V = varcovmat_2_PD$mat,
random = list( ~ 1 | ID, ~ 1 | Experiment, ~ 1 | Parasite),
level = 1, fitfunction = rma.glmulti, crit="aicc")
rank.models <- weightable(res)
rank.models
summary(res@objects[[1]])
summary(res@objects[[1]])
print(res)
print(res)
res <- glmulti(g ~ Trait.type * Gradient.category -1, data=dat_2,
V = varcovmat_2_PD$mat,
random = list( ~ 1 | ID, ~ 1 | Experiment, ~ 1 | Parasite),
level = 2, fitfunction = rma.glmulti, crit="aicc")
print(res)
plot(res)
summary(res@objects[[1]])
summary(res@objects[[1]])
plot(res, type="s")
plot(res, type="s")
plot(res, type="s")
top <- weightable(res)
top <- top[top$aicc <= min(top$aicc) + 2,]
top
res <- glmulti((g ~ Trait.type * Gradient.category-1), data=dat_2,
V = varcovmat_2_PD$mat,
random = list( ~ 1 | ID, ~ 1 | Experiment, ~ 1 | Parasite),
level = 2, fitfunction = rma.glmulti, crit="aicc")
print(res)
plot(res)
# Using glmulti package
rma.glmulti <- function(formula, data, V, random, ...){
rma.mv(formula, V = V, data = data, random = random, method="ML", ...)
}
res <- glmulti(g ~ Trait.type * Gradient.category-1,
data=dat_2,
V = varcovmat_2_PD$mat,
random = list( ~ 1 | ID, ~ 1 | Experiment, ~ 1 | Parasite),
level = 2, fitfunction = rma.glmulti, crit="aicc")
print(res)
plot(res)
# Using glmulti package
rma.glmulti <- function(formula, data, V, random, ...){
rma.mv(formula, V = V, data = data, random = random, method="ML", ...) # To compare models, we have to use ML
}
res <- glmulti(g ~ Trait.type*Gradient.category-1,
data=dat_2,
V = varcovmat_2_PD$mat,
random = list( ~ 1 | ID, ~ 1 | Experiment, ~ 1 | Parasite),
level = 2, fitfunction = rma.glmulti, crit="aicc")
print(res)
plot(res)
top <- weightable(res)
top <- top[top$aicc <= min(top$aicc) + 2,]
top
summary(res@objects[[1]])
plot(res, type="s")
#Multimodel inference
eval(metafor:::.glmulti)
coef(res)
mmi <- as.data.frame(coef(res))
mmi <- data.frame(Estimate=mmi$Est, SE=sqrt(mmi$Uncond), Importance=mmi$Importance, row.names=row.names(mmi))
mmi$z <- mmi$Estimate / mmi$SE
mmi$p <- 2*pnorm(abs(mmi$z), lower.tail=FALSE)
names(mmi) <- c("Estimate", "Std. Error", "Importance", "z value", "Pr(>|z|)")
mmi$ci.lb <- mmi[[1]] - qnorm(.975) * mmi[[2]]
mmi$ci.ub <- mmi[[1]] + qnorm(.975) * mmi[[2]]
mmi <- mmi[order(mmi$Importance, decreasing=TRUE), c(1,2,4:7,3)]
round(mmi, 4)
#Multimodel predictions
x <- c("Gradient.category" = "Environment", "Trait.type"="Intensity")
preds <- list()
for (j in 1:res@nbmods) {
model <- res@objects[[j]]
vars <- names(coef(model))[-1]
if (length(vars) == 0) {
preds[[j]] <- predict(model)
} else {
preds[[j]] <- predict(model, newmods=x[vars])
}
}
res@nbmods
res@objects
names(coef(model))
names(coef(model))[-1]
names(coef(model))[-2]
#Multimodel predictions
x <- c("Gradient.category" == "Environment", "Trait.type" == "Intensity")
preds <- list()
for (j in 1:res@nbmods) {
model <- res@objects[[j]]
vars <- names(coef(model))[-1]
if (length(vars) == 0) {
preds[[j]] <- predict(model)
} else {
preds[[j]] <- predict(model, newmods=x[vars])
}
}
weights <- weightable(res)$weights
yhat <- sum(weights * sapply(preds, function(x) x$pred))
print(weights)
weightable(res)$weights
weightable(res)
preds
yhat <- sum(weights * sapply(preds, function(x) x$pred))
for (j in 1:res@nbmods) {
model <- res@objects[[j]]
vars <- names(coef(model))[-1]
if (length(vars) == 0) {
preds[[j]] <- predict(model)
} else {
preds[[j]] <- predict(model, newmods=x[vars])
}
}
sapply(preds, function(x) x$pred)
(weights * (sapply(preds, function(x) x$pred)))
x$pred
(weights * as.numeric(sapply(preds, function(x) x$pred)))
sum(weights * as.numeric(sapply(preds, function(x) x$pred)))
sum(as.numeric(weights * as.numeric(sapply(preds, function(x) x$pred))))
is.numeric(sapply(preds, function(x) x$pred))
preds
#Multimodel predictions
x <- c("Gradient.category" == "Environment", "Trait.type" == "Intensity")
preds <- list()
for (j in 1:res@nbmods) {
model <- res@objects[[j]]
vars <- names(coef(model))[-1]
if (length(vars) == 0) {
preds[[j]] <- predict(model)
} else {
preds[[j]] <- predict(model, newmods=x[vars])
}
}
weights
